# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mo-deployment
  labels:
    app: mo
  {{- with .Values.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.os2mo.replicaCount }}
  selector:
    matchLabels:
      app: mo
  template:
    metadata:
      labels:
        app: mo
    spec:
      containers:
        - name: mo
          image: "{{ .Values.os2mo.image.registry }}/{{ .Values.os2mo.image.repository }}:{{ .Values.os2mo.image.tag }}"
          env:
            - name: PORT
              value: "5000"

            - name: ENABLE_CORS
              value: "true"

            # Disable service platformen
            - name: DUMMY_MODE
              value: "true"

            # LoRA
            - name: LORA_AUTH
              value: "false"
            - name: DISABLE_ALEMBIC
              value: "true"
            - name: DB_HOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: DB_SSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: DB_NAME
              value: {{ .Values.database.mox.name }}
            - name: DB_USER
              value: {{ .Values.database.mox.user }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mox.secret }}
                  key: db_password

            # AMQP
            {{- if .Values.amqp.enabled }}
            {{- $is_missing_url_secret := empty .Values.amqp.url_secret }}

            {{- if $is_missing_url_secret }}
              {{- fail "Must have url_secret set if AMQP is enabled" }}
            {{- else }}
            - name: AMQP_ENABLE
              value: "true"
              # TODO: Remove AMQP_URL when everyone is on OS2mo v23.11.5
            - name: AMQP_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.amqp.url_secret }}
                  key: url
            - name: AMQP__URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.amqp.url_secret }}
                  key: url
            {{- end }}
            {{- end }}

            # Confdb
            - name: CONF_DB_USE
              value: "false"

            - name: TESTCAFE_ENABLE
              value: "false"

            # Keycloak
            - name: KEYCLOAK_SCHEMA
              value: http
            - name: KEYCLOAK_PORT
              value: "8080"
            - name: KEYCLOAK_HOST
              value: "keycloak-service"
            {{- $is_http := empty .Values.ingress.tls_secret }}
            {{- $protocol := ternary "http" "https" $is_http }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: "{{ $protocol }}://{{ .Values.ingress.hostname }}/auth/"
            - name: KEYCLOAK_MO_CLIENT
              value: "mo-frontend"
            - name: KEYCLOAK_RBAC_ENABLED
              value: {{ .Values.os2mo.keycloakRbacEnabled | quote }}

            - name: CONFDB_SHOW_ORG_UNIT_BUTTON
              value: {{ .Values.sdtool.enabled | quote }}

            # Never audit-log integrations that read all of MO
            - name: ACCESS_LOG_NO_LOG_UUIDS
              value: '["052ec901-baad-c0de-7371-6c6578706f72"]'  # sql export

            # TODO: remove the old `AUDIT_READLOG_NO_LOG_UUIDS` when #64270 is
            # deployed everywhere
            - name: AUDIT_READLOG_NO_LOG_UUIDS
              value: '["052ec901-baad-c0de-7371-6c6578706f72"]'  # sql export

            {{- range $name, $value := .Values.os2mo.environment }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: 5000
          resources:
            {{- toYaml .Values.os2mo.resources | nindent 12 }}
          {{- if .Values.os2mo.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /health/live
              port: 5000
            periodSeconds: {{ .Values.os2mo.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.os2mo.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.os2mo.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 5000
            periodSeconds: {{ .Values.os2mo.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.os2mo.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.os2mo.probes.readiness.failureThreshold }}
          startupProbe:
            httpGet:
              path: /health/ready
              port: 5000
            failureThreshold: {{ .Values.os2mo.probes.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.os2mo.probes.startupProbe.periodSeconds }}
          {{- end }}
      initContainers:
        {{ include "os2mo.wait-for-keycloak" . | nindent 8 }}
        {{- if .Values.sdtool.enabled }}
        {{ include "os2mo.wait-for-sdtool" . | nindent 8 }}
        {{- end }}
        - name: mox-init
          image: "{{ .Values.os2mo.db_init.image.registry }}/{{ .Values.os2mo.db_init.image.repository }}:{{ .Values.os2mo.db_init.image.tag }}"
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.database.host }}
            - name: POSTGRES_USER
              value: "{{ .Values.database.user }}"
            {{- if .Values.os2mo.db_init.make_superuser }}
            - name: MAKE_SUPERUSER
              value: "true"
            {{- end }}
            {{ if ne .Values.database.sslmode "" }}
            - name: POSTGRES_SSL
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                  {{ else }}
                  name: mox-db-secret
                  {{ end }}
                  key: db_password

            - name: DB_NAME
              value: {{ .Values.database.mox.name }}
            - name: DB_USER
              value: {{ .Values.database.mox.user }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mox.secret }}
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}

        {{ if .Values.fixture }}
        - name: fixture-loader
          image: magentaaps/os2mo-fixture-loader:latest
          args: [ {{ .Values.fixture }} ]
          env:
            - name: PGHOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: PGSSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: PGDATABASE
              value: {{ .Values.database.mox.name }}
            - name: PGUSER
              value: {{ .Values.database.user }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  {{ if .Values.database.password_secret }}
                  name: {{ .Values.database.password_secret }}
                  {{ else }}
                  name: mox-db-secret
                  {{ end }}
                  key: db_password
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}
        {{ end }}
        - name: alembic
          image: "{{ .Values.os2mo.image.registry }}/{{ .Values.os2mo.image.repository }}:{{ .Values.os2mo.image.tag }}"
          command: [ "alembic", "upgrade", "head"]
          env:
            - name: DB_HOST
              value: {{ .Values.database.host }}
            {{ if ne .Values.database.sslmode "" }}
            - name: DB_SSLMODE
              value: {{ .Values.database.sslmode }}
            {{ end }}
            - name: DB_NAME
              value: {{ .Values.database.mox.name }}
            - name: DB_USER
              value: {{ .Values.database.mox.user }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.mox.secret }}
                  key: db_password
            # KEYCLOAK_RBAC_ENABLED is duplicated here because Alembic
            # initialises the same settings object as OS2mo proper, for some
            # reason.
            - name: KEYCLOAK_RBAC_ENABLED
              value: {{ .Values.os2mo.keycloakRbacEnabled | quote }}
            {{- range $name, $value := .Values.os2mo.environment }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.os2mo.resources | nindent 12 }}

        - name: keycloak-realm-builder
          image: "{{ .Values.keycloak.builder.image.registry }}/{{ .Values.keycloak.builder.image.repository }}:{{ .Values.keycloak.builder.image.tag }}"
          env:
            {{ include "os2mo.keycloak_terraform_db_connection" . | nindent 12 }}
            - name: TF_VAR_KEYCLOAK_ADMIN_USERNAME
              value: "admin"
            - name: TF_VAR_KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "os2mo.keycloak_admin_secret" . }}
                  key: admin_password
            - name: TF_VAR_KEYCLOAK_URL
              value: "http://keycloak-service:8080"
            {{- $is_https := empty .Values.ingress.tls_secret }}
            {{- $protocol := ternary "http" "https" $is_https }}
            - name: TF_VAR_KEYCLOAK_MO_CLIENT_REDIRECT_URI
              value: "[\"{{ $protocol }}://{{ .Values.ingress.hostname }}/*\"]"
            - name: TF_VAR_KEYCLOAK_MO_CLIENT_WEB_ORIGIN
              value: "[\"{{ $protocol }}://{{ .Values.ingress.hostname }}\"]"
            {{- range $name, $value := .Values.keycloak.builder.environment }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.initContainers.resources | nindent 12 }}

        - name: create-dipex-client-secret
          image: "{{ .Values.keycloak.integrationbuilder.image.registry }}/{{ .Values.keycloak.integrationbuilder.image.repository }}:{{ .Values.keycloak.integrationbuilder.image.tag }}"
          imagePullPolicy: {{ .Values.keycloak.integrationbuilder.image.pullPolicy }}
          env:
            {{ include "os2mo.keycloak_terraform_db_connection" .  | nindent 12 }}
            - name: POSTGRES_SCHEMA_NAME
              value: terraform_remote_state_dipex_client

            # Keycloak REST connection
            - name: TF_VAR_admin_password
              valueFrom:
                secretKeyRef:
                  name: {{ include "os2mo.keycloak_admin_secret" . }}
                  key: admin_password

            # Configuration of the client
            - name: TF_VAR_client_name
              value: dipex
            - name: TF_VAR_client_roles
              value: '["admin", "service_api"]'
            - name: TF_VAR_client_secret
              valueFrom:
                secretKeyRef:
                  name: keycloak-dipex-secret
                  key: client_secret
            - name: TF_VAR_client_uuid
              value: "d1fec000-baad-c0de-0000-004449504558"

      restartPolicy: Always
