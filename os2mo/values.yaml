# SPDX-FileCopyrightText: Magenta ApS
#
# SPDX-License-Identifier: MPL-2.0
---
# Annotations to de applied to all resources
annotations:
  chart_repository: "https://git.magenta.dk/rammearkitektur/os2mo-helm-chart"

metrics:
  enabled: false

sentry:
  secret: sentry-secret
  environment: null

timezone: "Europe/Copenhagen"

ingress:
  # Must be 'nginx' for protection of Keycloak admin endpoints
  class: "nginx"
  # TLS hostname
  hostname: "os2mo.example.com"
  # Name of the TLS secret to use for ingress. If set TLS will be enabled.
  tls_secret: null
  annotations: {}

wait_for_service:
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: latest

amqp:
  enabled: false
  url_secret: null
  amqp_scheme: null
  amqp_port: null

os2mo:
  replicaCount: 1
  image:
    registry: docker.io
    repository: magentaaps/os2mo
    tag: latest
  port: 80
  init:
    image:
      registry: docker.io
      repository: magentaaps/os2mo-init
      tag: latest
    config: {}
    log_level: INFO
  db_init:
    image:
      registry: docker.io
      repository: magentaaps/postgres-os2mo
      tag: 13-11.19-bullseye
    make_superuser: false
  resources:
    requests:
      memory: "1024Mi"
      cpu: "250m"
    limits:
      memory: "2048Mi"
      cpu: "2500m"
  headless: false
  keycloakRbacEnabled: true
  environment: {}
  probes:
    enabled: true
    startupProbe:
      failureThreshold: 150
      periodSeconds: 2
    liveness:
      periodSeconds: 60
      timeoutSeconds: 15
      failureThreshold: 3
    readiness:
      periodSeconds: 60
      timeoutSeconds: 15
      failureThreshold: 3

  newAMQPSubSystemEnabled: false

  frontend:
    replicaCount: 1
    image:
      registry: docker.io
      repository: magentaaps/os2mo-frontend
      tag: latest
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"
    probes:
      startupProbe:
        failureThreshold: 150
        periodSeconds: 2
      liveness:
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3
      readiness:
        periodSeconds: 10
        timeoutSeconds: 1
        failureThreshold: 3

  naldo:
    image:
      registry: docker.io
      repository: magentaaps/os2mo-naldo
      tag: latest
    resources:
      requests:
        memory: "64Mi"
        cpu: "100m"
      limits:
        memory: "128Mi"
        cpu: "200m"
    environment: {}

dipex:
  image:
    registry: docker.io
    repository: magentaaps/dipex
    tag: latest
  cronjobs: {}
    # Examples on the structure of defining a cronjob
    # - name: jobname1
    #   schedule: "*/5 * * * *"
    #   command: ["python", "--version"]
    # - name: jobname2
    #   schedule: "0 * * * *"
    #   command:
    #     - "python"
    #     - "metacli.py"
  extraEnv: null
  # Consider using the "extraEnv" section instead of the old "settings". This will
  # maybe require that the part of DIPEX you are going to use is rewritten to handle
  # its reading of settings a bit differently
  settings:
    mox.base: "http://mo-service:5000/lora"
    mora.base: "http://mo-service:5000"
    crontab.RUN_IMPORTS_DUMMY: true
    crontab.SVC_USER: "USER@KOMMUNE.NET"
    crontab.SVC_KEYTAB: "/tmp/keytab-file"
    crontab.CRON_BACKUP: "/tmp/backup-dir"
    crontab.CRON_LOG_FILE: "/tmp/cron-log-file"
    crontab.CRON_LOG_JSON_SINK: "/tmp/log.json"
    crontab.BACKUP_SAVE_DAYS: "60"
    crontab.SNAPSHOT_LORA: "/tmp/db-snapshot.sql"
    crontab.OS2MO_COMPOSE_YML: "/tmp/to/os2mo/docker-compose.yml"
  secrets: {}
  resources:
    requests:
      memory: "512Mi"
      cpu: "100m"
    limits:
      memory: "1536Mi"
      cpu: "1000m"

keycloak:
  image:
    registry: docker.io
    repository: magentaaps/os2mo-keycloak
    tag: 33.4.1
  init:
    image:
      registry: docker.io
      repository: magentaaps/postgres-keycloak-init
      tag: 12.7-11.7
  builder:
    image:
      registry: docker.io
      repository: magentaaps/os2mo-keycloak-realm-builder
      tag: latest
    environment: {}
  integrationbuilder:
    image:
      registry: docker.io
      repository: magentaaps/os2mo-keycloak-integration-builder
      tag: latest
  startupProbe:
    failureThreshold: 60
    periodSeconds: 5
  resources:
    requests:
      memory: "1024Mi"
      cpu: "250m"
    limits:
      memory: "2048Mi"
      cpu: "500m"
  # Name of the secret to use to for the admin user password.
  # If not set, the password will be autogenerated.
  admin_secret: null

database:
  # Determine whether to deploy the database as a pod
  external: false
  # Hostname for the database
  image:
    registry: docker.io
    repository: postgres
    tag: "11"
  host: mox-db-service
  user: postgres
  # Name of the secret to use for external database.
  # If not set, it will be generated with the below password.
  password_secret: null
  # Null means autogenerated password
  password: null

  sslmode: ""
  keycloak_jdbc_params: ""

  resources:
    requests:
      memory: "1024Mi"
      cpu: "250m"
    limits:
      memory: "2048Mi"
      cpu: "2000m"

  keycloak:
    name: "keycloak"
    user: "keycloak"
  mox:
    name: "mox"
    user: "mox"
    secret: "mox-secret"

fkk:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-fkk
    tag: latest
  extraEnv: null
  database:
    init:
      image:
        registry: docker.io
        # We will use this for now
        # (see https://redmine.magenta-aps.dk/issues/57967)
        repository: magentaaps/postgres-keycloak-init
        tag: 12.7-11.7
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

omada:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mint-omada
    tag: latest
  extraEnv: null
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

sd_changed_at:
  enabled: false
  init:
    image:
      registry: docker.io
      repository: magentaaps/os2mo-sd-changed-at-init
      tag: master
  image:
    registry: docker.io
    repository: magentaaps/os2mo-sd-changed-at
    tag: latest
  db:
    name: sd
    user: sd
    init:
      image:
        registry: docker.io
        # We will use this for now
        # (see https://redmine.magenta-aps.dk/issues/57967)
        repository: magentaaps/postgres-keycloak-init
        tag: 12.7-11.7
  mora_base: http://mo-service:5000
  sd_secret_name: sd-secret
  sd_global_from_date: null
  sd_job_function: null
  sd_monthly_hourly_divide: null
  environment: {}
  cronjob_enabled: true
  cronjob_schedule: "*/5 6-17 * * *"
  # If set, we will save log files (rotating every day) in
  # a PV for as many days as specified
  number_of_days_to_persist_logs_to_files: null
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"

sdtool:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-http-trigger-sdtool
    tag: latest
  sd_secret_name: sd-secret
  sd_too_deep: '[]'
  environment: {}
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

sdtool_plus:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-sdtool-plus
    tag: latest
  sd_secret_name: sd-secret
  cronjob_enabled: false
  cronjob_schedule: "0 6 * * *"
  cronjob_trigger_path: "/trigger"
  cronjob_addr_enabled: false
  cronjob_addr_schedule: "30 6 * * *"
  cronjob_sd_job_functions_enabled: false
  cronjob_sd_job_functions_schedule: "0 12 * * *"
  rundb:
    name: sdtool_plus
    user: sdtool_plus
    init:
      image:
        registry: docker.io
        # We will use this for now
        # (see https://redmine.magenta-aps.dk/issues/57967)
        repository: magentaaps/postgres-keycloak-init
        tag: 12.7-11.7
  email_secret_name: null
  minisync:
    ingress:
      enabled: false
      # https://kubernetes.github.io/ingress-nginx/examples/auth/basic/
      basicAuthSecret: null

  environment: {}
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"

initContainers:
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "250m"

nameOverride: ""
fullnameOverride: ""

fixture: null

orgviewer:
  image:
    registry: docker.io
    repository: magentaaps/os2orgviewer
    tag: latest
  environment: {}

  med:
    enabled: false
    url: null
    org_uuid: null
    title: null
    ingress:
      hostname: null
      tls_secret: null
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "250m"
    environment: {}

  adm:
    enabled: false
    url: null
    org_uuid: null
    title: null
    ingress:
      hostname: null
      tls_secret: null
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "250m"
    environment: {}

os2sync:
  enabled: false
  cronjob_enabled: true
  cronjob_schedule: "0 0 * * *"
  image:
    registry: docker.io
    repository: os2sync/linux
    tag: latest
  exporter:
    registry: docker.io
    repository: magentaaps/os2mo-os2sync-export
    tag: latest
  init:
    image:
      registry: docker.io
      repository: magentaaps/openssl
      tag: latest
  disable_revocation_check: true
  log_request_response: true
  log_level: DEBUG
  # Note: os2sync specific - not used in the same way as
  # the environment value elsewhere in this chart
  enable_scheduler: true
  environment: PROD
  # Set this to the municipality CVR
  municipality: null
  mysql_version: 8.0.29
  mysql_deploy: true
  db_host: null
  db_name: os2sync
  db_username: os2sync_admin
  # envs for os2sync_export:
  extraEnv:
    - name: top_unit_uuid
      value: null
      # TODO: Remove the following section when os2sync_export is upgraded past version 6 everywhere
    - name: os2sync_top_unit_uuid
      value: null

  resources:
    requests:
      memory: "512Mi"
      cpu: "100m"
    limits:
      memory: "768Mi"
      cpu: "250m"


orggatekeeper:
  enabled: false
  cronjob_enabled: true
  cronjob_schedule: "0 * * * *"
  image:
    registry: docker.io
    repository: magentaaps/os2mo-amqp-trigger-organisation-gatekeeper
    tag: latest
  environment: {}
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  probes:
    liveness:
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

adguid_sync:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-amqp-trigger-adguid-sync
    tag: latest
  environment: {}
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  probes:
    liveness:
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

ad_to_mo_sync:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-amqp-trigger-ad-to-mo-sync
    tag: latest
  environment: {}
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  probes:
    liveness:
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

sql_export:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-sql_export
    tag: latest
  environment: {}

  actual_state:
    # A secret containing the database password under the key "password"
    secret_name: null
    cronjob_enabled: true
    cronjob_schedule: "*/90 * * * *"  # At every 90th minute

  historic_state:
    # A secret containing the database password under the key "password"
    secret_name: null
    cronjob_enabled: true
    cronjob_schedule: "0 0 * * *"  # Once a day, at midnight

  resolve_dar: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"

manager_engagement_elevator:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-amqp-trigger-elevate-manager
    tag: latest
    pullPolicy: IfNotPresent
  environment: {}
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
  probes:
    liveness:
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

manager_terminator:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-amqp-trigger-manager-terminator
    tag: latest
    pullPolicy: IfNotPresent
  environment: {}
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1024Mi"
      cpu: "1000m"
  probes:
    liveness:
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

os2mo_smtp:
  enabled: false
  image:
    registry: docker.io
    repository: magentaaps/os2mo-smtp
    tag: latest
  extraEnv: []
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# External integrations to create a Keycloak token for, e.g.:
#
# - jobName: legoland-keycloak-token-creator
#   keycloakClientID: legoland
#   keycloakClientUUID: d1fec000-baad-c0de-0000-004449504558
#   roles: ["admin"]
#   secret: aarhus-keycloak-token
#
# Where
#  - `keycloakClientUUID` is a somewhat identifiable UUID.
#    https://rammearkitektur.docs.magenta.dk/os2mo/tech-docs/audit-log.html
#  - `secret` is the name of a secret that must contain the key `client_secret`.
#  - `roles` are RBAC roles for the integration builder.
externalIntegrations: []
